<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jsp+servlet+javabean]]></title>
    <url>%2F2018%2F09%2F15%2Fdemo%2F</url>
    <content type="text"><![CDATA[jsp+servlet+javabean开发模式jsp什么是jsp？ JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以 &lt;%开头以%&gt;结束。 JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。 JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。 JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递 控制信息和共享信息。 优点 与ASP相比：JSP有两大优势。首先，动态部分用Java编写，而不是VB或其他MS专用语言，所以更加强大与易用。第二点就是JSP易于移植到非MS平台上。 与纯 Servlet 相比：JSP可以很方便的编写或者修改HTML网页而不用去面对大量的println语句。 与SSI相比：SSI无法使用表单数据、无法进行数据库链接。 与JavaScript相比：虽然JavaScript可以在客户端动态生成HTML，但是很难与服务器交互，因此不能提供复杂的服务，比如访问数据库和图像处理等等。 与静态HTML相比：静态HTML不包含动态信息 servlet什么是servlet？Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。 使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。 Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势： 性能明显更好。 Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。 Servlet 是独立于平台的，因为它们是用 Java 编写的。 服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。 Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。 servlet任务Servlet 执行以下主要任务： 读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。 读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。 处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。 发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。 发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。 javabean简介：JavaBean是使用Java语言开发的一个可重用的组件，在JSP的开发中可以使用JavaBean减少重复代码，使整个JSP代码的开发更简洁。JSP搭配JavaBean来使用，有以下的优点： 1.可将HTML和Java代码分离，这主要是为了日后维护的方便。如果把所有的程序代码（HTML和Java）写到JSP页面中，会使整个程序代码又多又复杂，造成日后维护上的困难。 2.可利用JavaBean的优点。将日常用到的程序写成JavaBean组件，当在JSP要使用时，只要调用JavaBean组件来执行用户所要的功能，不用再重复写相同的程序，这样以来也可以节省开发所需的时间。 下面给大家具体介绍个实例项目名称：新闻发布管理系统1、具体的项目包​ 创建两张表user表和news表 2、javabean的编写12345678910111213141516171819202122232425package com.zzu.bean;public class User &#123;private String username;private String password;public String getUsername() &#123; return username;&#125;public void setUsername(String username) &#123; this.username = username;&#125;public String getPassword() &#123; return password;&#125;public void setPassword(String password) &#123; this.password = password;&#125;public boolean IsNull() &#123; if(this.username == null || "".equals(this.username.trim())) &#123; return true; &#125;else &#123; return false; &#125;&#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.zzu.bean;public class News &#123;private String id;private String username;private String newsType;private String title;private String source;private String author;private String keywords;private String content;private String createTime;private int click;private int state;private int del;public News()&#123; this.id=""; this.username=""; this.newsType=""; this.title=""; this.source=""; this.author=""; this.keywords=""; this.content=""; this.createTime=""; this.click=0; this.state=0; this.del=0;&#125;public String getId() &#123; return id;&#125;public void setId(String id) &#123; this.id = id;&#125;public String getUsername() &#123; return username;&#125;public void setUsername(String username) &#123; this.username = username;&#125;public String getNewsType() &#123; return newsType;&#125;public void setNewsType(String newsType) &#123; this.newsType = newsType;&#125;public String getTitle() &#123; return title;&#125;public void setTitle(String title) &#123; this.title = title;&#125;public String getAuthor() &#123; return author;&#125;public void setAuthor(String author) &#123; this.author = author;&#125;public String getKeywords() &#123; return keywords;&#125;public void setKeywords(String keywords) &#123; this.keywords = keywords;&#125;public String getContent() &#123; return content;&#125;public void setContent(String content) &#123; this.content = content;&#125;public String getCreateTime() &#123; return createTime;&#125;public void setCreateTime(String createTime) &#123; this.createTime = createTime;&#125;public int getClick() &#123; return click;&#125;public void setClick(int click) &#123; this.click = click;&#125;public int getState() &#123; return state;&#125;public void setState(int state) &#123; this.state = state;&#125;public int getDel() &#123; return del;&#125;public void setDel(int del) &#123; this.del = del;&#125;public String getSource() &#123; return source;&#125;public void setSource(String source) &#123; this.source = source;&#125;&#125; 3、DAO层及DAOImpl层的实现1234567891011package com.zzu.dao;import java.sql.SQLException;import com.zzu.bean.User;public interface UserDao &#123; public Integer AddUser(User user); public User find(String username); public User login(String username,String password);&#125; 1234567891011121314package com.zzu.dao;import java.util.List;import com.zzu.bean.News;public interface NewsDao &#123; void add(News news); void update(News news); void delete(String id); List&lt;News&gt; findById(String id); List&lt;News&gt; findAll(); List&lt;News&gt; Sou(String title);&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.zzu.dao.Impl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import com.zzu.bean.User;import com.zzu.dao.UserDao;import com.zzu.util.JdbcUtil;public class UserDaoImpl implements UserDao &#123; @Override //添加 public Integer AddUser(User user) &#123; int res = -1; Connection con= null; PreparedStatement ps = null; String sql = "insert into user values(?,?)"; try &#123; con = JdbcUtil.getConnection(); ps = con.prepareStatement(sql); ps.setString(1, user.getUsername()); ps.setString(2, user.getPassword()); res=ps.executeUpdate(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, null); &#125; return res; &#125; //查找 public User find(String username)&#123; User u=new User(); Connection con= null; PreparedStatement ps = null; ResultSet rs=null; String sql="select * from user where username=?"; try &#123; con = JdbcUtil.getConnection(); ps = con.prepareStatement(sql); ps.setString(1,username); rs = ps.executeQuery(); while (rs.next()) &#123; u.setUsername(rs.getString("username")); u.setPassword(rs.getString("password"));&#125; &#125;catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, rs); &#125; return u; &#125; //登陆验证 public User login(String username, String password)&#123; User u = new User(); Connection con = null; PreparedStatement ps = null; ResultSet rs=null; try &#123; String sql="select * from user where username=? and password=?"; con = JdbcUtil.getConnection(); ps = con.prepareStatement(sql); ps.setString(1, username); ps.setString(2, password); rs = ps.executeQuery(); if(rs.next())&#123; u.setUsername(rs.getString("username")); u.setPassword(rs.getString("password")); // System.out.println("登陆成功"); &#125;else&#123; System.out.println("登陆失败"); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, rs); &#125; return u; &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214package com.zzu.dao.Impl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.zzu.bean.News;import com.zzu.dao.NewsDao;import com.zzu.util.JdbcUtil;public class NewsDaoImpl implements NewsDao &#123; @Override public void add(News news) &#123; Connection con = null; PreparedStatement ps = null; String sql = "insert into news VALUES(?,?,?,?,?,?,?,?,?,?,?,?) "; try &#123; con = JdbcUtil.getConnection(); ps = con.prepareStatement(sql); ps.setString(1, news.getId()); ps.setString(2, news.getUsername()); ps.setString(3, news.getNewsType()); ps.setString(4, news.getTitle()); ps.setString(5, news.getAuthor()); //System.out.println(news.getId()); //System.out.println(news.getUsername()); ps.setString(6, news.getSource()); ps.setString(7, news.getKeywords()); ps.setString(8, news.getContent()); ps.setString(9, news.getCreateTime()); ps.setInt(10, news.getClick()); ps.setInt(11, news.getState()); ps.setInt(12, news.getDel()); //System.out.println(news.getTitle()); ///System.out.println("正在添加"); ps.execute(); System.out.println("添加成功"); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, null); &#125; &#125; @Override public void update(News news) &#123; Connection con = null; PreparedStatement ps = null; String sql = "update news set username=?,newsType=?,title=?,author=?,source=?,keywords=?,content=?,createTime=?, click=?,state=?,del=? where id=?"; try &#123; con = JdbcUtil.getConnection(); ps = con.prepareStatement(sql); ps.setString(1, news.getUsername()); ps.setString(2, news.getNewsType()); ps.setString(3, news.getTitle()); ps.setString(4, news.getAuthor()); ps.setString(5, news.getSource()); ps.setString(6, news.getKeywords()); ps.setString(7, news.getContent()); ps.setString(8, news.getCreateTime()); ps.setInt(9, news.getClick()); ps.setInt(10, news.getState()); ps.setInt(11, news.getDel()); ps.setString(12, news.getId()); int flag = ps.executeUpdate(); if (flag &gt; 0) &#123; System.out.println("更新新闻成功"); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, null); &#125; &#125; @Override public void delete(String id) &#123; Connection con = null; PreparedStatement ps = null; String sql="delete from news where id=?"; try &#123; con = JdbcUtil.getConnection(); ps = con.prepareStatement(sql); ps.setString(1, id); int flag = ps.executeUpdate(); if (flag &gt; 0) &#123; System.out.println("删除新闻成功"); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, null); &#125; &#125; @Override public List&lt;News&gt; findById(String id) &#123; Connection con = null; PreparedStatement ps = null; ResultSet rs = null; String sql = "select * from news where id=?"; List&lt;News&gt; list = new ArrayList&lt;News&gt;(); try &#123; con=JdbcUtil.getConnection(); ps=con.prepareStatement(sql); ps.setString(1, id); rs = ps.executeQuery(); News news = new News(); while(rs.next())&#123; news.setId(rs.getString("id")); news.setTitle(rs.getString("title")); news.setNewsType(rs.getString("newsType")); news.setSource(rs.getString("source")); news.setAuthor(rs.getString("author")); news.setUsername(rs.getString("username")); news.setCreateTime(rs.getString("createTime")); news.setContent(rs.getString("content")); news.setKeywords(rs.getString("keywords")); news.setClick(0); news.setState(0); news.setDel(0); list.add(news); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, rs); &#125; return list; &#125; @Override public List&lt;News&gt; findAll() &#123; List&lt;News&gt; newsList = new ArrayList&lt;News&gt;(); Connection con = null; PreparedStatement ps = null; ResultSet rs = null; try &#123; con = JdbcUtil.getConnection(); String sql = "select * from news"; ps = con.prepareStatement(sql); rs = ps.executeQuery(); while(rs.next())&#123; News news=new News(); news.setId(rs.getString("id")); news.setUsername(rs.getString("username")); news.setNewsType(rs.getString("newsType")); news.setTitle(rs.getString("title")); news.setSource(rs.getString("source")); news.setAuthor(rs.getString("author")); news.setKeywords(rs.getString("keywords")); news.setContent(rs.getString("content")); news.setCreateTime(rs.getString("createTime")); news.setClick(rs.getInt("click")); news.setState(rs.getInt("State")); news.setDel(rs.getInt("del")); newsList.add(news); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally&#123; JdbcUtil.closeAll(con, ps, rs); &#125; return newsList; &#125; public List&lt;News&gt; Sou(String title)&#123; List&lt;News&gt; list = new ArrayList&lt;News&gt;(); Connection con = null; PreparedStatement ps = null; ResultSet rs = null; con=JdbcUtil.getConnection(); String sql="select * from news where title like '%"+title+"%'"; try &#123; ps = con.prepareStatement(sql); //ps.setString(1, title); rs=ps.executeQuery(); while(rs.next()) &#123; News news = new News(); news.setId(rs.getString("id")); news.setKeywords(rs.getString("keywords")); news.setAuthor(rs.getString("author")); news.setContent(rs.getString("content")); news.setCreateTime(rs.getString("createTime")); news.setNewsType(rs.getString("newsType")); news.setSource(rs.getString("source")); news.setTitle(rs.getString("title")); news.setUsername(rs.getString("username")); news.setClick(rs.getInt("click")); news.setState(rs.getInt("state")); news.setDel(rs.getInt("del")); list.add(news); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return list; &#125;&#125; 4、servlet层的实现举个别例子12345678910111213141516171819202122232425262728293031323334353637383940package com.zzu.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.zzu.bean.User;import com.zzu.dao.Impl.UserDaoImpl;public class LoginServlet extends HttpServlet &#123; private UserDaoImpl uername; public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding("utf-8"); response.setContentType("text/html;charset=utf-8"); String username = request.getParameter("username"); String password = request.getParameter("password"); UserDaoImpl ud = new UserDaoImpl(); User user = ud.login(username, password); if(user.getUsername()==null||user.getPassword()==null)&#123; request.getSession().setAttribute("message", "用户名或密码错误！"); request.getRequestDispatcher("demo.html").forward(request, response); &#125;else if(user.getUsername().equals("admin")&amp;&amp;user.getPassword().equals("123")) &#123; System.out.println("登陆成功"); request.getSession().setAttribute("user", user); request.getRequestDispatcher("index.html").forward(request, response); &#125; else&#123; request.getRequestDispatcher("/showIndex").forward(request, response); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.zzu.servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.zzu.bean.User;import com.zzu.dao.Impl.UserDaoImpl;public class RegisterServlet extends HttpServlet &#123; public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=utf-8"); int i=-1; UserDaoImpl ud = new UserDaoImpl(); User user = new User(); User u1 = new User(); user.setUsername(request.getParameter("username")); user.setPassword(request.getParameter("password")); if(user.getUsername() == null || user.getPassword() == null || "".equals(user.getUsername().trim()) || "".equals(user.getPassword().trim())) &#123; request.setAttribute("message","请输入用户名或密码!"); request.getRequestDispatcher("demo.html").forward(request,response); &#125;else&#123; u1 = ud.find(user.getUsername()); //校验从数据库查询的账户是否存在 if(u1.IsNull()) &#123; i = ud.AddUser(user); if(i&gt;0) &#123; request.setAttribute("message", "注册成功!"); request.getRequestDispatcher("demo.html").forward(request,response); &#125;else &#123; request.setAttribute("message","注册失败!"); request.getRequestDispatcher("demo.heml").forward(request,response); &#125; &#125;else &#123; request.setAttribute("message","对不起，您输入的账号已存在，请重新输入!"); request.getRequestDispatcher("demo.html").forward(request,response); &#125; &#125; &#125;&#125; 5、util工具包12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.zzu.util;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;/** * 封装常用的操作 * @author Jie.Yuan * */public class JdbcUtil &#123; // 连接参数 // private String url = "jdbc:mysql://localhost:3306/jdbc_demo"; private static String url = "jdbc:mysql:///news"; private static String user = ""; private static String password = ""; /** * 返回连接对象 */ public static Connection getConnection() &#123; try &#123; Class.forName("com.mysql.jdbc.Driver"); return DriverManager.getConnection(url, user, password); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; /** * 关闭 */ public static void closeAll(Connection con, Statement stmt, ResultSet rs) &#123; try &#123; if (rs != null) &#123; rs.close(); // 快速异常捕获 Alt + shift + z rs = null; // 建议垃圾回收期回收资源 &#125; if (stmt != null) &#123; stmt.close(); stmt = null; &#125; if (con != null &amp;&amp; !con.isClosed()) &#123; con.close(); con = null; &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125;&#125; 以上是本人的心得体会，如有异议请在1440576071@qq.com留言。。。。。。。。。。谢谢支持！]]></content>
      <categories>
        <category>java类</category>
      </categories>
      <tags>
        <tag>web-MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统搭建]]></title>
    <url>%2F2018%2F08%2F23%2FLinux%2F</url>
    <content type="text"><![CDATA[一、工具VmwareWorkStation 12.0——虚拟机软件（必需） RedHatEnterpriseLinux [RHEL]7.0——红帽操作系统（必需） 点击下载 二、安装配置VM虚拟机第1步：运行下载完成的Vmware Workstation虚拟机软件包，将会看到如图1-1所示的虚拟机程序安装向导初始界面。 第2步：在虚拟机软件的安装向导界面单击“下一步”按钮 第3步：在最终用户许可协议界面选中“我接受许可协议中的条款”复选框，然后单击“下一步”按钮 第4步：选择虚拟机软件的安装位置（可选择默认位置），选中“增强型键盘驱动程序”复选框后单击“下一步”按钮 第5步：根据自身情况适当选择“启动时检查产品更新”与“帮助完善VMware Workstation Pro”复选框，然后单击“下一步”按钮 第6步：选中“桌面”和“开始菜单程序文件夹”复选框，然后单击“下一步”按钮 第7步：一切准备就绪后，单击“安装”按钮 第8步：进入安装过程，此时要做的就是耐心等待虚拟机软件的安装过程结束 第9步：大约5～10分钟后，虚拟机软件便会安装完成，然后再次单击“完成”按钮 第10步：双击桌面上生成的虚拟机快捷图标，在弹出的如图1-10所示的界面中，输入许可证密钥，或者选择试用之后，单击“继续”按钮（这里选择的是“我希望试用VMware Worksatation 12 30天”复选框） 第11步：在出现“欢迎使用VMware Workstation 12”界面后，单击“完成”按钮 第12步：在桌面上再次双击快捷方式，此时便看到了虚拟机软件的管理界面 第1步：在图1-12中，单击“创建新的虚拟机”选项，并在弹出的“新建虚拟机向导”界面中选择“典型”单选按钮，然后单击“下一步”按钮 第2步：选中“稍后安装操作系统”单选按钮，然后单击“下一步”按钮 第3步：在图1-15中，将客户机操作系统的类型选择为“Linux”，版本为“Red Hat Enterprise Linux 7 64位”，然后单击“下一步” 第4步：填写“虚拟机名称”字段，并在选择安装位置之后单击“下一步”按钮 第5步：将虚拟机系统的“最大磁盘大小”设置为20.0GB（默认即可），然后单击“下一步”按钮 第6步：单击“自定义硬件”按钮， 第7步：在出现的图1-19所示的界面中，建议将虚拟机系统内存的可用量设置为2GB，最低不应低于1GB。如果自己的真机设备具有很强的性能，那么也建议将内存量设置为2GB，因为将虚拟机系统的内存设置得太大没有必要 第8步：根据您真机的性能设置CPU处理器的数量以及每个处理器的核心数量，并开启虚拟化功能 第9步：光驱设备此时应在“使用ISO镜像文件”中选中了下载好的RHEL系统镜像文件 第10步：VM虚拟机软件为用户提供了3种可选的网络模式，分别为桥接模式、NAT模式与仅主机模式。这里选择“仅主机模式” 桥接模式：相当于在物理主机与虚拟机网卡之间架设了一座桥梁，从而可以通过物理主机的网卡访问外网。 NAT模式：让VM虚拟机的网络服务发挥路由器的作用，使得通过虚拟机软件模拟的主机可以通过物理主机访问外网，在真机中NAT虚拟机网卡对应的物理网卡是VMnet8。 仅主机模式：仅让虚拟机内的主机与物理主机通信，不能访问外网，在真机中仅主机模式模拟网卡对应的物理网卡是VMnet1。 第11步：把USB控制器、声卡、打印机设备等不需要的设备统统移除掉。移掉声卡后可以避免在输入错误后发出提示声音，确保自己在今后实验中思绪不被打扰。然后单击“关闭”按钮 第12步：返回到虚拟机配置向导界面后单击“完成”按钮。虚拟机的安装和配置顺利完成 第13步：当看到如图下图所示的界面时，就说明您的虚拟机已经被配置成功了。接下来准备步入属于您的Linux系统之旅吧 三、安装Linux第1步：在虚拟机管理界面中单击“开启此虚拟机”按钮后数秒就看到RHEL 7系统安装界面，如图所示。在界面中，Test this media &amp; install Red Hat Enterprise Linux 7.0和Troubleshooting的作用分别是校验光盘完整性后再安装以及启动救援模式。此时通过键盘的方向键选择Install Red Hat Enterprise Linux 7.0选项来直接安装Linux系统。 第2步：接下来按回车键后开始加载安装镜像，所需时间大约在30～60秒，请耐心等待 第3步：选择系统的安装语言后单击Continue按钮 第4步：在安装界面中单击SOFTWARE SELECTION选项 第5步：RHEL 7系统的软件定制界面可以根据用户的需求来调整系统的基本环境，例如把Linux系统用作基础服务器、文件服务器、Web服务器或工作站等。此时您只需在界面中单击选中Server with GUI单选按钮，然后单击左上角的Done按钮即可 第6步：返回到RHEL 7系统安装主界面，单击NETWORK &amp; HOSTNAME选项后，将Hostname字段设置为linuxprobe.com，然后单击左上角的Done按钮 第7步：返回到安装主界面，单击INSTALLATION DESTINATION选项来选择安装媒介并设置分区。此时不需要进行任何修改，单击左上角的Done按钮即可 第8步：返回到安装主界面，单击Begin Installation按钮后即可看到安装进度，在此处选择ROOT PASSWORD 第9步：然后设置root管理员的密码。若坚持用弱口令的密码则需要单击2次左上角的Done按钮才可以确认，如图所示。这里需要多说一句，当您在虚拟机中做实验的时候，密码无所谓强弱，但在生产环境中一定要让root管理员的密码足够复杂，否则系统将面临严重的安全问题。 第10步：Linux系统安装过程一般在30～60分钟，在安装过程期间耐心等待即可。安装完成后单击Reboot按钮 第11步：重启系统后将看到系统的初始化界面，单击LICENSE INFORMATION选项 第12步：选中I accept the license agreement复选框，然后单击左上角的Done按钮 第13步：返回到初始化界面后单击FINISH CONFIGURATION选项，即可看到Kdump服务的设置界面。如果暂时不打算调试系统内核，也可以取消选中Enable kdump复选框，然后单击Forward按钮 第14步：在如图所示的系统订阅界面中，选中No, I prefer to register at a later time单选按钮，然后单击Finish按钮。此处设置为不注册系统对后续的实验操作和生产工作均无影响 第15步：虚拟机软件中的RHEL 7系统经过又一次的重启后，我们终于可以看到系统的欢迎界面，如图所示。在界面中选择默认的语言English (United States)，然后单击Next按钮 第16步：将系统的输入来源类型选择为English (US)，然后单击Next按钮 第17步：为RHEL 7系统创建一个本地的普通用户，该账户的用户名为linuxprobe，密码为redhat，然后单击Next按钮 第18步：按照下图所示的设置来设置系统的时区，然后单击Next按钮 第19步：在上图所示的界面中单击Start using Red Hat Enterprise Linux Server按钮，出现如图所示的界面。至此，RHEL 7系统完成了全部的安装和部署工作。准备开始学习Linux系统吧]]></content>
      <categories>
        <category>操作系统类</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS篇（一）]]></title>
    <url>%2F2018%2F08%2F08%2Freader%2F</url>
    <content type="text"><![CDATA[js一、什么是JS 基于对象 JS本身就有一些现成的对象可供程序员使用，例如：Array，Math、String。。。 JS并不排除你可以自已按一定的规则创建对象 事件驱动 JS代码写好后，需要外界触发后，方可运行，例如：单击事件，定时执行，。。。 解释性 每次运行JS代码时，得需要将原代码一行一行的解释执行 相对编译型语言（例如：Java、C++）执行速度相对较慢 基于浏览器的动态交互网页技术 如果JS嵌入到HTML中，可以不需要服务器支持，直接由浏览器解释执行 如果JS嵌入到JSP或Servlet中，必需要服务器支持，直接由浏览器解释执行 嵌入在HTML标签中 JS必须嵌入到一个名叫的标签中，方可运行脚本语言 二、JS的三种类型 （1）基本类型：number，string，boolean number包含正数，负数，小数 string由&apos;&apos;或&quot;&quot;定界 boolean由true或false，但js中的boolean也包含更多情况，例如：存在表示 true，不存在表示false 123456var num = 100;var str = "哈哈";var flag = false;window.alert(num);window.alert(str);window.alert(flag); **（2）特殊类型**：null，undefined null表示一个变量指向null undefined表示一个变量指向的值不确定 1234 var array = null;var student;alert(array);alert(student); **（3）复合类型：**函数，对象，数组 对象包含内置对象和自定义的对象 三、JS中有三种定义函数的方式 正常方式 12345function mysum(num1,num2)&#123; return num1 + num2;&#125;var myresult = mysum(100,200);alert("myresult="+myresult); 构造器方式 12 var youresult = new Function("num1","num2","return num1+num2");alert( youresult(1000,2000) ); 直接量或匿名或无名方式 1234var theyresult = function(num1,num2)&#123; return num1 + num2; &#125; alert( theyresult(10000,20000) ); 四、JS中有四种对象 内置对象Date，Math，String，Array，。。。 12var str = new Date().toLocaleString(); window.document.write("&lt;font size='44' color='red'&gt;"+str+"&lt;/font&gt;"); 2.自定义对象：Person，Card，。。。 12345678910function Student(id,name,sal)&#123; //this指向s引用 this.id = id; this.name = name; this.sal = sal; &#125; var s = new Student(1,"波波",7000); document.write("编号:" + s.id + "&lt;br/&gt;"); document.write("姓名:" + s.name + "&lt;br/&gt;"); document.write("薪水:" + s.sal + "&lt;br/&gt;"); 3.浏览器对象： window，document，status，location，history。。。 123function myrefresh()&#123; window.history.go(0); &#125; 4.ActiveX对象：ActiveXObject(“Microsoft.XMLHTTP”)，。。。]]></content>
      <categories>
        <category>java类</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
